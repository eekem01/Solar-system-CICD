name: Create Secret and Deploy to Kubernetes Dev Environment

on:
  push:
    branches:
      - main
      - "*feature/*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MONGO_URI: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJs version - 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test

  docker:
    name: Containerization
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: DockerHub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Install mongosh
        run: |
          # Install mongosh
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Debug Environment Variables
        run: |
          echo "MONGO_URI: $MONGO_URI"
          echo "MONGO_USERNAME: $MONGO_USERNAME"
          echo "MONGO_PASSWORD: $MONGO_PASSWORD"

      - name: Test MongoDB Connection
        run: |
          mongosh "$MONGO_URI" --username "$MONGO_USERNAME" --password "$MONGO_PASSWORD" --eval "db.runCommand({ping: 1})"

      - name: Docker image test
        run: |
          echo "Starting Docker container..."
          docker run --name solar-system-app -d  \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Debug Docker container
        run: |
          docker exec solar-system-app env

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets: 
      k8s-kubeconfig: ${{secrets.KUBECONGIG}}
      mongodb-password: ${{secrets.MONGO_PASSWORD}}
    with:
      mongodb_uri: ${{vars.MONGO_URI}}
      environment: development
      k8s-manifet-dir: kuberetes/development/

      


  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: DEV integration testing
    needs: dev-deploy
    runs-on: ubuntu latest
    steps:
      - name: Test URL output using CURL and JQ
        env:
            URI: ${{ needs.dev-deploy.outputs.APP_INGRESS_URI}}
        run: |
         echo $URL
         echo "---------------------------------------------------"
         curl https://$URL/live -s -k | jq -r .status | grep -I live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets: 
      k8s-kubeconfig: ${{secrets.KUBECONGIG}}
      mongodb-password: ${{secrets.MONGO_PASSWORD}}
      with:
      mongodb_uri: ${{vars.MONGO_URI}}
      environment: production
      k8s-manifet-dir: kuberetes/production/



................................................................
    environment:
      name: production
      url: https:// ${{ steps.set-ingress-host-address.outputs.PP_INGRESS_HOST}}
    outputs:
        APP_INGRESS_URI: ${{ steps.set-ingress-host-address.outputs.PP_INGRESS_HOST}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install kubectl cli
        uses: azure/setup-kubectl@v3
        with:
            version: 'v1.26.0'

      - name: set kubeconfig file
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG}}

      - name: Fetch Kubernetes Cluster details
        run: |
          kubectl version --output=yaml
          echo ----------------------------------------------------
          kubectl get nodes

      - name: Save NGINX Ingress Controller IP as a GITHUB Environment variable.
        run: |
          echo "INGRESS_IP=$(kubectl -n ingres-nginx get svc ngress-nginx-contoller -o jasonpath="{.status.loadbalancer.ingress[0].ip}
          ")" >> $GITHUB_ENV

      - name: Replace tokens in manaifest file
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/production/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP}}

      - name: Check files
        run: |
         cat kubernetes/production/*.yaml

     
         
      - name: create MongoDB secrete
        run: |
         kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
         -- from-literal=MONGO_URI=${{ env.MONGO_URI}} \
         -- from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME}} \
         -- from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD}} \
         --save-config \
         --dry-run=client \
         -o yaml | kubectl apply -f -


      - name: Deploy to PROD environment
        run: |
          kubectl apply -f  kubernetes/production

      - name: Set app ingress host URL
        id: set-ingress-host-address
        run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE}}  get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"

  prod-integration-testing:
    name: Prod integration testing
    if: github.ref == 'refs/heads/main'
    needs: prod-deploy
    runs-on: ubuntu latest
    steps:
      - name: Test URL output using CURL and JQ
        env:
            URI: ${{ needs.prod-deploy.outputs.APP_INGRESS_URI}}
        run: |
         echo $URL
         echo "---------------------------------------------------"
         curl https://$URL/live -s -k | jq -r .status | grep -I live